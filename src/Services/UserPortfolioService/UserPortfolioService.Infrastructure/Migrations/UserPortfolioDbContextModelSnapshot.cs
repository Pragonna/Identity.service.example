// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserPortfolioService.Infrastructure.Persistence.Context;

#nullable disable

namespace UserPortfolioService.Infrastructure.Migrations
{
    [DbContext(typeof(UserPortfolioDbContext))]
    partial class UserPortfolioDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserPortfolioService.Domain.Entities.CryptoWalletEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserPortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WalletType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserPortfolioId");

                    b.ToTable("CryptoWallets");
                });

            modelBuilder.Entity("UserPortfolioService.Domain.Entities.TelegramEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TelegramHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserPortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserPortfolioId")
                        .IsUnique();

                    b.ToTable("Telegrams");
                });

            modelBuilder.Entity("UserPortfolioService.Domain.Entities.TwitterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConnectedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserPortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserPortfolioId")
                        .IsUnique();

                    b.ToTable("Twitters");
                });

            modelBuilder.Entity("UserPortfolioService.Domain.Entities.UserPortfolioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserPortfolios");
                });

            modelBuilder.Entity("UserPortfolioService.Domain.Entities.CryptoWalletEntity", b =>
                {
                    b.HasOne("UserPortfolioService.Domain.Entities.UserPortfolioEntity", "UserPortfolioEntity")
                        .WithMany("CryptoWallets")
                        .HasForeignKey("UserPortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("UserPortfolioService.Domain.Entities.Balance", "Balances", b1 =>
                        {
                            b1.Property<Guid>("CryptoWalletEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("CryptoAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("CurrencyPrice")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("CryptoWalletEntityId", "Id");

                            b1.ToTable("Balance");

                            b1.WithOwner()
                                .HasForeignKey("CryptoWalletEntityId");
                        });

                    b.Navigation("Balances");

                    b.Navigation("UserPortfolioEntity");
                });

            modelBuilder.Entity("UserPortfolioService.Domain.Entities.TelegramEntity", b =>
                {
                    b.HasOne("UserPortfolioService.Domain.Entities.UserPortfolioEntity", "UserPortfolioEntity")
                        .WithOne("TelegramEntity")
                        .HasForeignKey("UserPortfolioService.Domain.Entities.TelegramEntity", "UserPortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPortfolioEntity");
                });

            modelBuilder.Entity("UserPortfolioService.Domain.Entities.TwitterEntity", b =>
                {
                    b.HasOne("UserPortfolioService.Domain.Entities.UserPortfolioEntity", "UserPortfolioEntity")
                        .WithOne("TwitterEntity")
                        .HasForeignKey("UserPortfolioService.Domain.Entities.TwitterEntity", "UserPortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPortfolioEntity");
                });

            modelBuilder.Entity("UserPortfolioService.Domain.Entities.UserPortfolioEntity", b =>
                {
                    b.OwnsOne("UserPortfolioService.Domain.Entities.ImageType", "Image", b1 =>
                        {
                            b1.Property<Guid>("UserPortfolioEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<byte[]>("Data")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserPortfolioEntityId");

                            b1.ToTable("UserPortfolios");

                            b1.WithOwner()
                                .HasForeignKey("UserPortfolioEntityId");
                        });

                    b.Navigation("Image");
                });

            modelBuilder.Entity("UserPortfolioService.Domain.Entities.UserPortfolioEntity", b =>
                {
                    b.Navigation("CryptoWallets");

                    b.Navigation("TelegramEntity");

                    b.Navigation("TwitterEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
